datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  Password?
  notes     Note[]
  exercices Exercise[]
  workouts  Workout[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Exercise {
  id     String @id @default(cuid())
  title  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  set    Set[]
}

model Workout {
  id       String   @id @default(cuid())
  date     DateTime
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  duration Float?
  set      Set[]
}

model Set {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId String
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutId  String
  series     Series[]
}

model Series {
  id          String @id @default(cuid())
  repetitions Int
  weigth      Float
  set         Set    @relation(fields: [setId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  setId       String
}
